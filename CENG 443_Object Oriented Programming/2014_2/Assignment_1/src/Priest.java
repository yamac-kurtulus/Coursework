
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;
import java.util.Timer;
import java.util.TimerTask;
import sun.security.krb5.JavaxSecurityAuthKerberosAccess;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Priest.java
//  @ Date : 13.3.2015
//  @ Author : 
//
//
public class Priest extends Knight {
    Polygon poly = new Polygon(
            new int[]{-10, 10, 10, -10},
            new int[]{-10, -10, 10, 10},
            4);

    @Override
    public void rangedAttack() {
        if (CanAttack()) {
            setSkillUsed(true);
            setCanAttack(false);
            Knight t;
            for (int i = 0; i < getTeam().size(); i++) {
                t = getTeam().get(i);
                if (insideArea (t))
                    t.takeDmg(-75);
            }
            getCoolDown().schedule(new TimerTask() {
                @Override
                public void run() {
                    setSkillUsed(false);
                }
            }, 500);
            getCoolDown().schedule(new TimerTask() {

                @Override
                public void run() {
                    setCanAttack(true);
                }
            }, (long) getCdLength());
        }
    }
    

    @Override
    public void draw(Graphics2D g) {
        Graphics2D gc = (Graphics2D) g.create();
        gc.setColor(getTeam().color);
        gc.translate(getX(), getY());
        gc.fill(poly);
        if (this.isSkillUsed()) {
            gc.setColor(new java.awt.Color(0f, 1f, 1f, 0.5f));
            gc.fillOval(-50, -50, 100, 100);
        }
        if (this.isAttacking()) {
            gc.setColor(Color.BLACK);
             gc.drawLine(0,0, (int) (getAttackTarget().getX() - getX()), (int) ((int)getAttackTarget().getY() - getY()));
        }
        gc.setColor(Color.WHITE);
        gc.setFont(Font.decode("arial 10"));
        gc.drawString("" + this.getHP(), -8, 5);

        gc.dispose();
    }

    Priest() {
        speed = 50;
        canAttack = true;
        coolDown = new Timer();
        hitPoint = 350;
        maxHealth = 350;
        score = 0;
        pxToMove = speed / (1000f / Simulation.DELAY);
        cdLength = 1000;
        attackRadius = 35;
    }

    boolean insideArea(Knight k) {
        float dx = k.getX() - this.getX();
        float dy = k.getY() - this.getY();
        return getSkillRadius()*getSkillRadius() > dx*dx+dy*dy;
    }

}
