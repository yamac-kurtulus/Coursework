
import java.awt.Color;
import java.awt.Container;
import java.awt.FlowLayout;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Simulation.java
//  @ Date : 13.3.2015
//  @ Author : 
//
//




public final class Simulation extends JFrame {
        public static int TEAM_SIZE = 8;
        public static float DELAY = 50f;
        public static int TURN_LENGTH = 2000;
        public static int STRATEGY_CHANGE_PROBABILITY = 20;
        private final ArrayList <KnightFactory> factories = new ArrayList<>();
	private final Display display = new Display();
        final Team[] teams = new Team[2];
        private static Simulation instance;
        private final Random rng = new Random();
        
        public Simulation () {
            super ();

        }
        
        public static void main(String[] args) {
            Instance().init();
            Instance().setVisible(true);
            Instance().setup();
            int turn = 0;
            while (true) {
                try {
                    Thread.sleep((int)DELAY);
                    turn+=(int) DELAY;
                } catch (InterruptedException ex) {
                    Logger.getLogger(Simulation.class.getName()).log(Level.SEVERE, null, ex);
                }
                Instance().stepAll();
                if (turn%TURN_LENGTH==0)
                    Instance ().setup ();
                Instance ().display.repaint();
            }
        }
        
        public static Simulation Instance() {
            if (instance == null)
                return instance = new Simulation();
            return instance;
	}
        
	public void stepAll() {
        
        Knight temp = null;
	for (int i = 0; i<TEAM_SIZE; i++) {
            temp = teams[0].get(i);
            if (temp!=null)
                temp.getStrategy().act();
            temp = teams[1].get(i);
            if (temp!=null)
                temp.getStrategy().act(); 
            }
	}
        
        public void init () {
            setTitle ("KO");
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setBounds(0, 0, 1024, 600);
            Container cp = getContentPane();
            cp.add(Instance().display);
            factories.add(new MageFactory());
            factories.add(new PriestFactory());
            factories.add(new RogueFactory());
            teams[0] = new Team(Color.BLUE, "El Morad", TEAM_SIZE, 400, 150);
            teams[1] = new Team(Color.RED, "Karus", TEAM_SIZE, 950,500);
            teams[0].enemy = teams[1];
            teams[1].enemy = teams[0];
            setup();
        }

    private void setup() {
        Strategy tempSt;
        Knight tmp;
        while (!teams[0].isFull())
            teams[0].addKnight(factories.get(rng.nextInt(factories.size())).produce());
        while (!teams[1].isFull())
             teams[1].addKnight(factories.get(rng.nextInt(factories.size())).produce());
        for (int i = 0; i< TEAM_SIZE; i++) {
            for (int j = 0; j<2; j++){
                if (rng.nextInt(100) < STRATEGY_CHANGE_PROBABILITY || teams[j].get(i).getStrategy() == null) {
                    tempSt = null;
                    switch (rng.nextInt(5)) {
                        case 0: 
                            tempSt = new AttackWeakestStrategy(teams[j].get(i));
                            break;
                        case 3:
                            tempSt = new AttackClosestStrategy(teams[j].get(i));
                            break;
                        default:
                            tempSt = new RandomMovementStrategy(teams[j].get(i));
                            
                    }
                    teams[j].get(i).setStrategy(tempSt);
                    decorate();
                }
            }
        }
    }
    
    private void decorate() {
        for (int j = 0; j<2; j++)
            for (int i = 0; i<TEAM_SIZE; i++){
                Knight k = teams[j].get(i);
                if (k.getScore() >= 75 && (k instanceof Priest || k instanceof Mage || k instanceof Rogue))
                    k = new Grade1Decorator(k);
                else if (k.getScore() >= 150 && k instanceof Grade1Decorator)
                    k = new Grade2Decorator(k);
                else if (k.getScore() >= 250 && k instanceof Grade2Decorator)
                    k = new Grade3Decorator(k);
                teams[j].set(i, k);
            }
    }
    
        
}
