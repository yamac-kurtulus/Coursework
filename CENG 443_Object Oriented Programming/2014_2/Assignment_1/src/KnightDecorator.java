
import java.awt.Graphics2D;
import java.util.Timer;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : SoldierDecorator.java
//  @ Date : 13.3.2015
//  @ Author : 
//
//




public abstract class KnightDecorator extends Knight {
    protected Knight component;

    @Override
    public void rangedAttack() {
        component.rangedAttack();
    }

    @Override
    public void meleeAttack() {
        component.meleeAttack();
    }

    @Override
    public void draw(Graphics2D g) {
        component.draw(g);
    }

    public KnightDecorator(Knight component) {
        this.component = component;
    }  

    @Override
    public Timer getCoolDown() {
        return component.getCoolDown(); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean takeDmg(int dmg) {
        this.setHP(this.getHP() - dmg);
        if (getHP() <= 0) {
            getTeam().removeKnight(this);
            return true;
        }
        else if (getHP() >= getMaxHealth())
            setHP(getMaxHealth());
        return false;
    }

    @Override
    public int getHP() {
        return component.getHP();
    }
    
    @Override
    public void setHP(int hp) {
        component.setHP(hp);
    }

    @Override
    Strategy getStrategy() {
        return component.getStrategy();
    }

    @Override
    void setStrategy(Strategy strategy) {
        component.setStrategy(strategy);
    }

    @Override
    public void moveTo(float x, float y) {
        component.moveTo(x, y);
    }

    @Override
    public float getX() {
        return component.getX();
    }

    @Override
    public float getY() {
        return component.getY();
    }

    @Override
    int getScore() {
        return component.getScore();
    }

    @Override
    void setScore(int s) {
        component.setScore(s);
    }

    @Override
    public float getSpeed() {
        return component.getSpeed();
    }

    @Override
    public void setSpeed(float speed) {
        component.setSpeed(speed);
    }

    @Override
    public float getDirection() {
        return component.getDirection();
    }

    @Override
    public void setDirection(float direction) {
        component.setDirection(direction);
    }

    @Override
    public void setCoolDown(Timer coolDown) {
        component.setCoolDown(coolDown);
    }

    @Override
    public Team getTeam() {
        return component.getTeam();
    }

    @Override
    public void setTeam(Team team) {
        component.setTeam(team);
    }

    @Override
    public boolean CanAttack() {
        return component.CanAttack();
    }

    @Override
    public void setCanAttack(boolean canAttack) {
        component.setCanAttack(canAttack);
    }

    @Override
    public void setX(float x) {
        component.setX(x);
    }

    @Override
    public void setY(float y) {
        component.setY(y);
    }

    @Override
    public int getMaxHealth() {
        return component.getMaxHealth();
    }

    @Override
    public void setMaxHealth(int maxHealth) {
        component.setMaxHealth(maxHealth);
    }

    @Override
    public float getPxToMove() {
        return component.getPxToMove();
    }

    @Override
    public void setPxToMove(float pxToMove) {
        component.setPxToMove(pxToMove);
    }

    @Override
    public void setIsAttacking(boolean b) {
        component.setIsAttacking(b);
    }

    @Override
    public boolean isAttacking() {
        return component.isAttacking();
    }

    @Override
    boolean insideAttackRange(Knight k) {
        return component.insideAttackRange(k);
    }

    @Override
    public boolean isCanAttack() {
        return component.isCanAttack();
    }

    @Override
    public float getAttackRadius() {
        return component.getAttackRadius();
    }

    @Override
    public void setAttackRadius(float attackRadius) {
        component.setAttackRadius(attackRadius);
    }

    @Override
    public float getSkillRadius() {
        return component.getSkillRadius();
    }

    @Override
    public void setSkillRadius(float skillRadius) {
        component.setSkillRadius(skillRadius);
    }

    @Override
    public void setAttacking(boolean attacking) {
        component.setAttacking(attacking);
    }

    @Override
    public Knight getAttackTarget() {
        return component.getAttackTarget();
    }

    @Override
    public void setAttackTarget(Knight attackTarget) {
        component.setAttackTarget(attackTarget);
    }

    @Override
    public float getCdLength() {
        return component.getCdLength();
    }

    @Override
    public void setCdLength(float cdLength) {
        component.setCdLength(cdLength);
    }

    @Override
    public boolean isSkillUsed() {
        return component.isSkillUsed();
    }

    @Override
    public void setSkillUsed(boolean skillUsed) {
        component.setSkillUsed(skillUsed);
    }
    
    
    
    
}
