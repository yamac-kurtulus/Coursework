
import java.awt.Graphics2D;
import java.util.Timer;
import java.util.TimerTask;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Soldier.java
//  @ Date : 13.3.2015
//  @ Author : 
//
//




public abstract class Knight {
    protected float speed, direction;
    protected int hitPoint;
    protected Timer coolDown;
    protected int score;
    protected Strategy strategy;
    protected Team team;
    protected boolean canAttack;
    protected float x, y;
    protected int maxHealth;
    protected float pxToMove;
    protected float attackRadius;
    protected float skillRadius;
    protected boolean attacking;
    protected Knight attackTarget;
    protected float cdLength = 2000;
    protected boolean skillUsed;
    public abstract void rangedAttack();
    public abstract void draw(Graphics2D g);


    public boolean takeDmg(int dmg) {
        this.setHitPoint(getHitPoint() - dmg);
        this.getTeam().enemy.totalDamage += dmg;
        if (getHitPoint() <= 0) {
            getTeam().removeKnight(this);
            this.getTeam().enemy.score += 75;
            return true;
        }
        else if (getHitPoint() >= getMaxHealth())
            setHitPoint(getMaxHealth());
        return false;
    }

    public int getHP () {
        return getHitPoint();
    }

    Strategy getStrategy() {
        return strategy;
    }

    void setStrategy(Strategy strategy) {
        this.strategy = strategy;
    }

    public void moveTo(float x, float y) {

       float delX = x - this.getX();
       float delY = y - this.getY();
       if (Math.abs(delX) > 20 || Math.abs(delY) > 20) {
            setDirection((float) Math.atan2(delY,delX));
            this.setX((float) (this.getX() + getPxToMove() * Math.cos(getDirection())));// * Math.signum(delX);
            this.setY((float) (this.getY() + getPxToMove() * Math.sin(getDirection()))); //* Math.signum(delY);
       }
       meleeAttack();
    }
    public float getX() {
        return x;
    }
    public float getY() {
        return y;
    }

    private int getHitPoint() {
        return hitPoint;
    }

    private void setHitPoint(int i) {
        hitPoint = i;
    }

    int getScore() {
        return score;
    }
    void setScore(int s) {
        score = s;
    }

    /**
     * @return the speed
     */
    public float getSpeed() {
        return speed;
    }

    /**
     * @param speed the speed to set
     */
    public void setSpeed(float speed) {
        this.speed = speed;
    }

    /**
     * @return the direction
     */
    public float getDirection() {
        return direction;
    }

    /**
     * @param direction the direction to set
     */
    public void setDirection(float direction) {
        this.direction = direction;
    }

    /**
     * @return the coolDown
     */
    public Timer getCoolDown() {
        return coolDown;
    }

    /**
     * @param coolDown the coolDown to set
     */
    public void setCoolDown(Timer coolDown) {
        this.coolDown = coolDown;
    }

    /**
     * @return the team
     */
    public Team getTeam() {
        return team;
    }

    /**
     * @param team the team to set
     */
    public void setTeam(Team team) {
        this.team = team;
    }

    /**
     * @return the canAttack
     */
    public boolean CanAttack() {
        return isCanAttack();
    }

    /**
     * @param canAttack the canAttack to set
     */
    public void setCanAttack(boolean canAttack) {
        this.canAttack = canAttack;
    }

    /**
     * @param x the x to set
     */
    public void setX(float x) {
        this.x = x;
    }

    /**
     * @param y the y to set
     */
    public void setY(float y) {
        this.y = y;
    }

    /**
     * @return the maxHealth
     */
    public int getMaxHealth() {
        return maxHealth;
    }

    /**
     * @param maxHealth the maxHealth to set
     */
    public void setMaxHealth(int maxHealth) {
        this.maxHealth = maxHealth;
    }

    /**
     * @return the pxToMove
     */
    public float getPxToMove() {
        return pxToMove;
    }

    /**
     * @param pxToMove the pxToMove to set
     */
    public void setPxToMove(float pxToMove) {
        this.pxToMove = pxToMove;
    }

    void setHP(int hp) {
        this.setHitPoint(hp);
    }
   public void setIsAttacking(boolean b) {
        setAttacking(b);
    }

    public boolean isAttacking() {
        return attacking;
    }

    

    boolean insideAttackRange(Knight k) {
        float dx = k.getX() - this.getX();
        float dy = k.getY() - this.getY();
        return getAttackRadius() * getAttackRadius() > dx * dx + dy * dy;
    }

    /**
     * @return the canAttack
     */
    public boolean isCanAttack() {
        return canAttack;
    }

    /**
     * @return the attackRadius
     */
    public float getAttackRadius() {
        return attackRadius;
    }

    /**
     * @param attackRadius the attackRadius to set
     */
    public void setAttackRadius(float attackRadius) {
        this.attackRadius = attackRadius;
    }

    /**
     * @return the skillRadius
     */
    public float getSkillRadius() {
        return skillRadius;
    }

    /**
     * @param skillRadius the skillRadius to set
     */
    public void setSkillRadius(float skillRadius) {
        this.skillRadius = skillRadius;
    }

    /**
     * @param attacking the attacking to set
     */
    public void setAttacking(boolean attacking) {
        this.attacking = attacking;
    }

    /**
     * @return the attackTarget
     */
    public Knight getAttackTarget() {
        return attackTarget;
    }

    /**
     * @param attackTarget the attackTarget to set
     */
    public void setAttackTarget(Knight attackTarget) {
        this.attackTarget = attackTarget;
    }

    /**
     * @return the cdLength
     */
    public float getCdLength() {
        return cdLength;
    }

    /**
     * @param cdLength the cdLength to set
     */
    public void setCdLength(float cdLength) {
        this.cdLength = cdLength;
    }

    /**
     * @return the skillUsed
     */
    public boolean isSkillUsed() {
        return skillUsed;
    }

    /**
     * @param skillUsed the skillUsed to set
     */
    public void setSkillUsed(boolean skillUsed) {
        this.skillUsed = skillUsed;
    }

    public void meleeAttack() {
        if (CanAttack() && !isAttacking()) {
            Knight t;
            for (int i = 0; i < getTeam().size(); i++) {
                if ((t = getTeam().enemy.get(i)) != null && insideAttackRange(t)) {
                    setIsAttacking(true);
                    setCanAttack(false);
                    setAttackTarget(t);
                    if (t.takeDmg(50)) {
                        this.setScore(this.getScore() + 75);
                    }
                    getCoolDown().schedule(new TimerTask() {
                @Override
                public void run() {
                    setCanAttack(true);
                }
            }, (long) getCdLength());
            getCoolDown().schedule(new TimerTask() {
                @Override
                public void run() {
                    setIsAttacking(false);
                }
            }, 500);
            break;
                }
                
            }
            
        }
    }
    
    
        
}
